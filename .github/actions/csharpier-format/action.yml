name: Format source using CSharpier
description: >
  Format source files in projects for using CSharpier

inputs:
  path:
    description: path from where to run the actions
    type: string
    required: false
    default: ${{ github.workspace }}
  projects:
    description: >
      project(s) to format
      empty string (default) defers to project defaults
      whitespace separated list. can use glob pattern.
      empty string (default) defers to solution.
    type: string
    required: false
    default: ''

runs:
  using: composite
  steps:
  - name: Run CSharpier format
    shell: python
    env:
      build_path: ${{ inputs.path }}
      build_projects: ${{ inputs.projects }}
    run: |-
      import os, sys, itertools
      from pathlib import Path

      basedir = os.getcwd()
      os.chdir(str(os.getenv('build_path')))

      projects = str(os.getenv('build_projects')).split()
      projects = [p for p in map(lambda f: [g.as_posix() for g in Path('.').rglob(f)], projects)]
      projects = list(set([p for p in itertools.chain.from_iterable(projects)]))

      if len(projects) == 0:
        projects.append('')

      err = 0
      for project in projects:
        print(f'checking {project}')
        command = f'dotnet csharpier --check {Path(project).parent}'
        print(command)
        err = os.system(command)
        if err != 0:
          break

        command = f'dos2unix --remove-bom --quiet --keepdate --add-eol {project}'
        print(command)
        err = os.system(command)
        if err != 0:
          break

        files = [g.as_posix() for g in Path(project).parent.rglob('*/*.cs')]
        if len(files) > 0:
          command = 'dos2unix --remove-bom --quiet --keepdate --add-eol ' + " ".join(files)
          print(command)
          err = os.system(command)
          if err != 0:
              break

      os.chdir(basedir)
      exit(err)
